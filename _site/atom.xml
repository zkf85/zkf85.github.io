<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Everest</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2018-06-11T15:28:50+08:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Kefeng Zhu</name>
   <email></email>
 </author>

 
 <entry>
   <title>@staticmethod和@classmethod的作用与区别</title>
   <link href="http://localhost:4000/python/2018/06/11/python_diff_between_staticmethod_and_classmethod.html"/>
   <updated>2018-06-11T15:24:00+08:00</updated>
   <id>http://localhost:4000/python/2018/06/11/python_diff_between_staticmethod_and_classmethod</id>
   <content type="html">&lt;h3 id=&quot;section&quot;&gt;相同点：&lt;/h3&gt;
&lt;p&gt;一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。
e.g.:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'foo'&lt;/span&gt; 
	&lt;span class=&quot;nd&quot;&gt;@staticmethod&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;static_foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;static_foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		
	&lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class_foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;class_foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而使用&lt;code class=&quot;highlighter-rouge&quot;&gt;@staticmethod&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;@classmethod&lt;/code&gt;，就可以不需要实例化，直接&lt;strong&gt;类名.方法名()&lt;/strong&gt;来调用。e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;A.static_foo&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;A.class_foo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这有利于组织代码，把某些应该属于某个类的函数给放到那个类里去，同时有利于命名空间的整洁。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;不同点：&lt;/h3&gt;

&lt;p&gt;既然@staticmethod和@classmethod都可以直接类名.方法名()来调用，那他们有什么区别呢&lt;/p&gt;

&lt;p&gt;从它们的使用上来看,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;@staticmethod&lt;strong&gt;不需要&lt;/strong&gt;表示自身对象的self和自身类的cls&lt;strong&gt;参数&lt;/strong&gt;，就跟使用函数一样。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@classmethod也不需要self参数，但&lt;strong&gt;第一个参数&lt;/strong&gt;需要是表示自身类的cls参数。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;A.bar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;cls.bar&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;cls().foo()&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;测试代码&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;oo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@staticmethod&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;static_foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;static_foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class_foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;class_foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
  
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;输出&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static_foo
1
class_foo
1
foo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>人工智能复习</title>
   <link href="http://localhost:4000/ai/2018/05/21/AI_course_revision_1.html"/>
   <updated>2018-05-21T09:37:00+08:00</updated>
   <id>http://localhost:4000/ai/2018/05/21/AI_course_revision_1</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
&quot;从这里开始人工智能课程总结。贵在坚持！&quot;
&lt;br /&gt;KF 05/21/2018
&lt;/div&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;
&lt;h3 id=&quot;pycharmide&quot;&gt;使用Pycharm作为IDE&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/help/pycharm/tool-windows.html&quot;&gt;PyCharm Help - Official
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pandas-&quot;&gt;Pandas 资料&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/#&quot;&gt;Pandas Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Knowledge of Leukemia</title>
   <link href="http://localhost:4000/life/2016/12/18/leukemia.html"/>
   <updated>2016-12-18T09:37:00+08:00</updated>
   <id>http://localhost:4000/life/2016/12/18/leukemia</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
在这里汇总一下关于这个病的一些知识和其他信息。要战胜敌人就得充分了解敌人。盼望南哥战胜它，早日康复！
&lt;/div&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.bloodjournal.org/content/116/18/3409?sso-checked=true&quot;&gt;How I treat Philadelphia chromosome–positive acute lymphoblastic leukemia&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Important Excerpt from an In-Depth Report on ALL&lt;sup id=&quot;fnref:maryland-report&quot;&gt;&lt;a href=&quot;#fn:maryland-report&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
This is an in-depth report on the causes, diagnosis, treatment, and prevention of leukemia:&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;a href=&quot;http://umm.edu/health/medical/reports/articles/acute-lymphocytic-leukemia&quot;&gt;&lt;strong&gt;Acute Lymphocytic Leukemia - An in-depth Report&lt;/strong&gt; - University of Maryland Medical Center&lt;/a&gt;&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;There are some key information and factors in the report and are listed below:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;i-acute-lymphocytic-leukemiamaryland-report&quot;&gt;I. Acute Lymphocytic Leukemia&lt;sup id=&quot;fnref:maryland-report:1&quot;&gt;&lt;a href=&quot;#fn:maryland-report&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;Acute lymphocytic leukemia (ALL) is also known as acute lymphoid leukemia or acute lymphoblastic leukemia. The majority of childhood leukemias are of the ALL type.&lt;/p&gt;

&lt;p&gt;Lymphocytes are the body’s primary immune cells. Among other vital functions, lymphocytes produce antibodies, factors that can target and attack specific foreign substances (antigens) and fight infections.&lt;/p&gt;

&lt;p&gt;Lymphocytes develop in the thymus gland or bone marrow and are therefore categorized as either B cells (bone marrow-derived cells) or T cells (thymus gland-derived cells).  ALL can arise from either T-cell or &lt;strong&gt;B-cell&lt;/strong&gt; lymphocytes. Most cases of ALL involve &lt;strong&gt;B cells&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ii-causesmaryland-report&quot;&gt;II. Causes&lt;sup id=&quot;fnref:maryland-report:2&quot;&gt;&lt;a href=&quot;#fn:maryland-report&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;Doctors do not know exactly what causes acute lymphocytic leukemia (ALL). It is likely that ALL develops from a combination of genetic, biologic, and environmental factors.&lt;/p&gt;

&lt;h3 id=&quot;genetic-translocations&quot;&gt;Genetic Translocations&lt;/h3&gt;

&lt;p&gt;Up to 65% of leukemias contain genetic rearrangements, called translocations, in which some of the genetic material (genes) on a chromosome may be shuffled or swapped between a pair of chromosomes.&lt;/p&gt;

&lt;p&gt;The most common genetic translocation in ALL is the Philadelphia (Ph) chromosome where DNA is swapped between chromosomes 9 and 22 [t(9:22)]. It occurs in about 20 - 30% of adults and 3 - 5% of children with ALL.&lt;/p&gt;

&lt;h2 id=&quot;iii-risk-factorsmaryland-report&quot;&gt;III. Risk Factors&lt;sup id=&quot;fnref:maryland-report:3&quot;&gt;&lt;a href=&quot;#fn:maryland-report&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h3 id=&quot;hereditary-disorders&quot;&gt;Hereditary Disorders&lt;/h3&gt;
&lt;p&gt;ALL does not appear to run in families. Still, certain genetic disorders may increase risk. For example, children with Down syndrome have a 20-times greater risk of developing ALL than the general population. Other rare genetic disorders associated with increased risk include Klinefelter syndrome, Bloom syndrome, Fanconi anemia, ataxia-telangiectasia, neurofibromatosis, Shwachman syndrome, IgA deficiency, and congenital X-linked agammaglobulinemia.&lt;/p&gt;

&lt;h3 id=&quot;radiation-and-chemical-exposure&quot;&gt;Radiation and Chemical Exposure&lt;/h3&gt;

&lt;p&gt;Previous cancer treatment with high doses of radiation or chemotherapy can increase the risk for developing ALL. Prenatal exposure to x-rays may also increase risk in children. Lower levels of radiation (living near power lines, video screen emissions, small appliances, cell phones) are unlikely to pose any cancer risk.&lt;/p&gt;

&lt;h2 id=&quot;iv-symptomsmaryland-report&quot;&gt;IV. Symptoms&lt;sup id=&quot;fnref:maryland-report:4&quot;&gt;&lt;a href=&quot;#fn:maryland-report&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;The symptoms of ALL may be difficult to recognize. ALL usually begins abruptly and intensely, but in some cases symptoms may develop slowly. They may be present one day, and absent the next, particularly in children. Symptoms develop when:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are not enough healthy mature white blood cells (leukocytes) to mount a defense against infection.&lt;/li&gt;
  &lt;li&gt;There are not enough healthy blood-clotting cells (platelets) to prevent bleeding.&lt;/li&gt;
  &lt;li&gt;The depleted oxygen-bearing red blood cells can’t provide enough oxygen to organs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Symptoms include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fatigue&lt;/li&gt;
  &lt;li&gt;Paleness – patients may have poor coloring from anemia caused by insufficient red blood cells&lt;/li&gt;
  &lt;li&gt;Recurrent minor infections&lt;/li&gt;
  &lt;li&gt;Fever without known cause&lt;/li&gt;
  &lt;li&gt;Bone pain&lt;/li&gt;
  &lt;li&gt;Abdominal swelling&lt;/li&gt;
  &lt;li&gt;Bruising – may result from only slight injury&lt;/li&gt;
  &lt;li&gt;Poor healing of minor cuts&lt;/li&gt;
  &lt;li&gt;Uncontrolled bleeding – bleeding events increase as the bone marrow fails to produce enough platelets to make a normal blood clot, a condition called thrombocytopenia.&lt;/li&gt;
  &lt;li&gt;Small, red spots on the skin (petechiae)&lt;/li&gt;
  &lt;li&gt;Vision changes (rare)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;v-prognosismaryland-report&quot;&gt;V. Prognosis&lt;sup id=&quot;fnref:maryland-report:5&quot;&gt;&lt;a href=&quot;#fn:maryland-report&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;p&gt;ALL is one of the most curable cancers and survival rates are now at an all-time high.&lt;/p&gt;

&lt;p&gt;According to the American Cancer Society, certain factors can help determine prognosis:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Age. Younger patients (especially those younger than age 50) have a better prognosis than older patients.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Initial white blood cell (WBC) count. People diagnosed with a WBC count below 50,000 tend to do better than people with higher WBC counts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Response to chemotherapy. Patients who achieve complete remission (absence of active cancer) within 4 - 5 weeks of starting treatment tend to have a better prognosis than those who take longer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vi-treatmentmaryland-report&quot;&gt;VI. Treatment&lt;sup id=&quot;fnref:maryland-report:6&quot;&gt;&lt;a href=&quot;#fn:maryland-report&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h3 id=&quot;treatment-phases&quot;&gt;1. Treatment Phases&lt;/h3&gt;

&lt;p&gt;There are typically &lt;strong&gt;three treatment stages&lt;/strong&gt; for the average-risk patient with ALL:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Induction&lt;/strong&gt; therapy is given in order to achieve a first remission (the absence of active cancer)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Consolidation&lt;/strong&gt; (intensification) therapy is given to prevent relapse after remission has been achieved&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Maintenance&lt;/strong&gt; treatment is lower intensity therapy given for several years to prevent relapse after remission&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because leukemia can also spread to the brain and spinal cord, where chemotherapy that is given intravenously or orally does not penetrate very well, most patients also need radiation to the brain and spinal cord, or chemotherapy that is injected into the layers around them. This is called central nervous system prophylaxis (preventive treatment) and is given during all treatment phases to prevent the cancer from spreading to the brain and spinal cord.&lt;/p&gt;

&lt;h3 id=&quot;specific-treatments-used-in-all&quot;&gt;2. Specific Treatments Used in ALL&lt;/h3&gt;

&lt;p&gt;The following are specific treatments used for ALL:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Chemotherapy is the primary treatment&lt;/strong&gt; for each stage. Newer drugs known as biological therapies are also being used.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Radiation to the brain and spinal cord is also administered in some cases.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;strong&gt;bone marrow transplant&lt;/strong&gt; may be recommended for some adult patients after treatment when there is no active cancer (remission) or for adults and children if the cancer has returned after treatment (relapsed).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;drugs-used-for-induction-chemotherapy&quot;&gt;3. Drugs Used for Induction Chemotherapy&lt;/h3&gt;
&lt;p&gt;Both children and adults typically start with a 3-drug regimen. Imatinib (Gleevec) or dasatinib (Sprycel) may be added for patients with Philadelphia chromosome-positive ALL.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;adults&lt;/strong&gt;, the standard drugs are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vincristine&lt;/li&gt;
  &lt;li&gt;Prednisone&lt;/li&gt;
  &lt;li&gt;Anthracycline drug, such as such as doxorubicin, daunorubicin, or epirubicin. Some adult chemotherapy regimens also add on an asparaginase drug or cyclophosphamide (Cytoxan).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;preventing-central-nervous-system-disease-cns-prophylaxis&quot;&gt;4. Preventing Central Nervous System Disease (CNS Prophylaxis)&lt;/h3&gt;

&lt;p&gt;Adult CNS prophylaxis is performed in one of three ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cranial radiation plus intrathecal chemotherapy with methotrexate&lt;/li&gt;
  &lt;li&gt;High-dose systemic infusion of methotrexate plus intrathecal methotrexate without cranial radiation&lt;/li&gt;
  &lt;li&gt;Intrathecal methotrexate chemotherapy alone&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;evidence-of-remission-after-induction-treatment&quot;&gt;5. Evidence of Remission after Induction Treatment&lt;/h3&gt;

&lt;p&gt;Survival in acute leukemia depends on complete remission (no signs of active cancer). Although not always clear-cut, remission is indicated by the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All signs and symptoms of leukemia disappear.&lt;/li&gt;
  &lt;li&gt;There are no abnormal cells in the blood, bone marrow, and cerebrospinal fluid.&lt;/li&gt;
  &lt;li&gt;The percentage of blast cells in the bone marrow is less than 5%.&lt;/li&gt;
  &lt;li&gt;Blood platelet count returns to normal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Induction can produce extremely rapid results. Nearly all children with ALL achieve remission after a month of induction treatment. The shorter the time to remission the better the outlook:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A complete remission usually occurs within the first 4 weeks. Patients who show low disease levels within 7 - 14 days have an excellent outlook, particularly if they have favorable genetic factors, and may need less-intensive treatments afterward.&lt;/li&gt;
  &lt;li&gt;Patients with high disease levels at 14 days or who require more than 4 weeks to achieve remission are at higher risk for relapse and most likely need more aggressive treatment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;side-effects-and-complications&quot;&gt;6. Side Effects and Complications&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Common Side Effects&lt;/em&gt;. Typical side effects include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nausea and vomiting. Drugs known as serotonin antagonists, such as ondansetron (Zofran) or granisteron (Kyril), can relieve these side effects.&lt;/li&gt;
  &lt;li&gt;Diarrhea&lt;/li&gt;
  &lt;li&gt;Hair loss&lt;/li&gt;
  &lt;li&gt;Mouth sores&lt;/li&gt;
  &lt;li&gt;Weight loss&lt;/li&gt;
  &lt;li&gt;Depression&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vii-transplantation&quot;&gt;VII. Transplantation&lt;/h2&gt;

&lt;h3 id=&quot;transplantation&quot;&gt;1. Transplantation&lt;/h3&gt;

&lt;p&gt;Stem cells that are made in the bone marrow are the early form of all blood cells in the body. They normally mature into red, white, or immune cells. To help the patient survive high dose chemotherapy needed to cure leukemia that has returned treatment, or not responded to treatment, a stem cell transplantation procedure may be used. Stem cell transplantation replaces blood stem cells that were lost during the initial chemotherapy treatment. The lost stem cells are replaced by transplanting them from a donor into the patient.&lt;/p&gt;

&lt;h3 id=&quot;the-blood-stem-cell-collection-procedure&quot;&gt;2. The Blood Stem Cell Collection Procedure&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Sources of Cells&lt;/em&gt;. Stem cells can be obtained either from the donor’s:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;(Bone marrow (bone marrow transplantation)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Blood (peripheral blood stem cell transplantation)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-transplant-procedure&quot;&gt;3. The Transplant Procedure&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The patient with ALL is given high-dose chemotherapy with or without radiation – a treatment known as conditioning. The point is to inactivate the immune system and to kill any remaining leukemia cells.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A few days after treatment, the patient is &lt;em&gt;rescued&lt;/em&gt; using the stored stem cells, which are administered through a vein. This may take several hours. Patients may experience fever, chills, hives, shortness of breath, or a fall in blood pressure during the procedure.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The patient is kept in a protected environment to minimize infection, and the patient usually needs blood cell replacement and nutritional support.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;side-effects-and-complications-1&quot;&gt;4. Side Effects and Complications&lt;/h3&gt;
&lt;p&gt;Stem-cell transplantation is a serious and complex procedure that can cause many short- and long-term side effects and complications.&lt;/p&gt;

&lt;p&gt;Early side effects of transplantation are similar to chemotherapy and include nausea, vomiting, fatigue, mouth sores, and loss of appetite.&lt;/p&gt;

&lt;p&gt;Bleeding because of reduced platelets is a high risk during the first four weeks and may require transfusions. Later side effects include fertility problems (if the ovaries are affected), thyroid gland problems (which can affect metabolism), lung damage (which can cause breathing problems) and bone damage.&lt;/p&gt;

&lt;h2 id=&quot;home-management-importantmaryland-report&quot;&gt;Home Management (IMPORTANT)&lt;sup id=&quot;fnref:maryland-report:7&quot;&gt;&lt;a href=&quot;#fn:maryland-report&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;p&gt;A parent should call the doctor if the child has any symptoms that are out of the ordinary, including (but not limited) to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Any fever of 101 °F or higher&lt;/li&gt;
  &lt;li&gt;Any signs of a flu or cold&lt;/li&gt;
  &lt;li&gt;Shortness of breath&lt;/li&gt;
  &lt;li&gt;Severe diarrhea&lt;/li&gt;
  &lt;li&gt;Blood in the urine or stools&lt;/li&gt;
  &lt;li&gt;Trouble urinating&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tracking Neutrophils&lt;/strong&gt;. Family should track their patients absolute neutrophil count. This measurement for the &lt;strong&gt;amount of white blood cells&lt;/strong&gt; is an important gauge of his &lt;strong&gt;ability to fight infection&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Counts over 1,000 usually provide sufficient protection so that children can engage in normal activities, including school and other functions where they are exposed to other children.&lt;/li&gt;
  &lt;li&gt;If the count is between 500 - 1,000, the child should avoid large groups.&lt;/li&gt;
  &lt;li&gt;If it falls between 200 - 500, the child should stay at home and should see only healthy visitors who have washed their hands vigorously.&lt;/li&gt;
  &lt;li&gt;Neutrophil counts below 200 indicate that the child is at high risk for infection and should have no visitors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;preventing-infection&quot;&gt;Preventing Infection&lt;/h3&gt;

&lt;p&gt;It is &lt;strong&gt;very important&lt;/strong&gt; to take precautions to prevent infection following chemotherapy or transplantation. Guidelines for infection prevention and control include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Discuss with the doctor what vaccinations are needed and when. Patient with ALL may need reimmunization. In general, it is best to have immunizations prior to chemotherapy and to avoid live virus vaccines during treatment,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Avoid crowds, especially during cold and flu season.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Be diligent about hand washing and make sure that visitors wash their hands. Alcohol-based handrubs are best.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Avoid eating raw fruits and vegetables. Poultry, meat, fish, eggs and other foods should be cooked thoroughly. Do not eat foods purchased at salad bars or buffets. In the first few months after the transplant, be sure to eat protein-rich foods to help restore muscle mass and repair cell damage caused by chemotherapy and radiation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Boil tap water before drinking it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dental hygiene is very important, including daily brushing and flossing. Use a soft toothbrush to prevent gum bleeding. Schedule regular visits with your dentist.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do not sleep with pets. Avoid contact with pets’ excrement.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Avoid fresh flowers and plants as they may carry mold. Do not garden.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Swimming may increase exposure to infection. If you swim, do not submerge your face in water. Do not use hot tubs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Report to the doctor any symptoms of fever, chills, cough, difficulty breathing, rash or changes in skin, and severe diarrhea or vomiting. Fever is one of the first signs of infection. Some of these symptoms can also indicate graft-versus-host disease.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Report to the ophthalmologist any signs of eye discharge or changes in vision. Patients who undergo radiation or who are on long-term steroid therapy have an increased risk for cataracts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some of the drugs used for leukemia cause extreme sun sensitivity. Sunburn can cause skin infection. Children should wear sunblock and sun-protective clothing when going outside.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;about-ph-positive-all&quot;&gt;About Ph-Positive ALL&lt;/h2&gt;

&lt;h3 id=&quot;what-is-ph-all-ph-positive-cml&quot;&gt;What is Ph+ ALL? &lt;sup id=&quot;fnref:ph-positive-CML&quot;&gt;&lt;a href=&quot;#fn:ph-positive-CML&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;“Ph” is an abbreviation for “Philadelphia chromosome,” the name given to the abnormal chromosome that can lead to the overproduction of white blood cells.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The plus sign (+) means that your laboratory tests show your bone marrow and white blood cells contain the abnormal Philadelphia chromosome.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-does-ph-happenph-positive-cml&quot;&gt;How Does Ph+ Happen?&lt;sup id=&quot;fnref:ph-positive-CML:1&quot;&gt;&lt;a href=&quot;#fn:ph-positive-CML&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;p&gt;The soft tissue inside our bones, called the bone marrow, produces a type of cell called a stem cell. As stem cells mature, they can turn into platelets, red blood cells, or white blood cells. Ph+ CML happens because of changes in the genetic material of these stem cells.&lt;/p&gt;

&lt;p&gt;Chromosomes are the parts of our cells that carry our DNA and genes—the things that give us our physical traits, such as blue eyes or brown hair, and that tell our body how to handle all the functions of life, including the process of making blood cells. Humans have 23 pairs of chromosomes. Ph+ CML happens when some genetic material from one chromosome (chromosome 9) switches position with some genetic material from another chromosome (chromosome 22).&lt;/p&gt;

&lt;p&gt;The new genetic material on chromosome 22 is called BCR-ABL and leads to abnormalities in your body’s process for making blood cells. When chromosome 22 has this abnormal BCR-ABL gene, scientists call it the Philadelphia chromosome. People with Ph+ CML have the BCR-ABL gene in their stem cells and white blood cells. The BCR-ABL gene produces a protein called Bcr-Abl. Scientists distinguish between the name of the gene and protein by how they are written.&lt;/p&gt;

&lt;p&gt;The Bcr-Abl protein causes your bone marrow to produce more and more white blood cells, and these white blood cells are often damaged. It acts like a switch that keeps your white blood cell production in the “on” position. Normally, your body would stop producing white blood cells that weren’t needed and damaged blood cells would die off, but the Bcr-Abl protein interferes with these processes. Instead, your bone marrow keeps making damaged white blood cells that, over time, crowd out healthy red blood cells and platelets.&lt;/p&gt;

&lt;p&gt;Scientists do not know exactly why the genetic material switches between the 2 chromosomes and continue to search for causes of Ph+ CML. Although Ph+ CML involves genetic material, be assured that it is not inherited. The abnormal gene is not passed down from parent to child.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.lls.org/leukemia/acute-lymphoblastic-leukemia/treatment/ph-positive-all-therapy&quot;&gt;Ph-Positive ALL Therapy&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;philadelphia-chromosome-phil-chromo&quot;&gt;Philadelphia Chromosome &lt;sup id=&quot;fnref:phil-chromo&quot;&gt;&lt;a href=&quot;#fn:phil-chromo&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;p&gt;The Philadelphia chromosome or Philadelphia translocation is a specific genetic abnormality in chromosome 22 of leukemia cancer cells (particularly chronic myelogenous leukemia (CML) cells). This chromosome is defective and unusually short because of reciprocal translocation of genetic material between chromosome 9 and chromosome 22, and contains a fusion gene called BCR-ABL1.&lt;/p&gt;

&lt;p&gt;(ABL represents “Abelson”, the name of a leukemia virus&lt;sup id=&quot;fnref:abelson&quot;&gt;&lt;a href=&quot;#fn:abelson&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.)&lt;/p&gt;

&lt;p&gt;Translocation results in an oncogenic BCR-ABL gene fusion that can be found on the shorter derivative 22 chromosome. This gene encodes for a Bcr-abl fusion protein. Depending on the precise location of fusion, the molecular weight of this protein can range from 185 to 210 kDa. Consequently, bcr-abl is referred to as p210 or p185.&lt;/p&gt;

&lt;p&gt;Three clinically important variants are the p190, p210, and p230 isoforms. p190 is generally associated with acute lymphoblastic leukemia (ALL), while &lt;strong&gt;p210&lt;/strong&gt; is generally associated with chronic myeloid leukemia but can also be associated with ALL.[6] p230 is usually associated with chronic myelogenous leukemia associated with neutrophilia and thrombocytosis.[6] Additionally, the p190 isoform can also be expressed as a splice variant of p210.[7]&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/public/img/20161218-1-1.png&quot; width=&quot;400&quot; /&gt;&lt;/center&gt;

&lt;h3 id=&quot;nomenclature&quot;&gt;Nomenclature&lt;/h3&gt;
&lt;p&gt;The Philadelphia chromosome is designated Ph (or Ph’) chromosome and designates the shortened chromosome 22. It arises from the translocation, which is termed t(9;22)(q34.1;q11.2). This means there is a translocation between chromosome 9 and chromosome 22, with breaks happening in region (3), band (4), sub-band (1) of the long arm (q) of chromosome 9 and region (1), band (1), sub-band (2) of the long arm (q) of chromosome 22. Hence the chromosome breakpoints are written as (9q34.1) and (22q11.2), respectively, using ISCN standards. Notation omitting the sub-bands is also commonly seen: t(9;22)(q34;q11).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:maryland-report&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://umm.edu/health/medical/reports/articles/acute-lymphocytic-leukemia&quot;&gt;&lt;strong&gt;Acute Lymphocytic Leukemia - An in-depth Report&lt;/strong&gt; - University of Maryland Medical Center&lt;/a&gt; &lt;a href=&quot;#fnref:maryland-report&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:maryland-report:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:maryland-report:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:maryland-report:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:maryland-report:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:maryland-report:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:maryland-report:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:maryland-report:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:ph-positive-CML&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.gleevec.com/patient/ph-cml-treatment.jsp?usertrack.filter_applied=true&amp;amp;NovaId=4029462192126550515&quot;&gt;What is Ph+ CML? - GLEEVEC&lt;/a&gt; &lt;a href=&quot;#fnref:ph-positive-CML&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:ph-positive-CML:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:phil-chromo&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Philadelphia_chromosome&quot;&gt;Philadelphia chromosome - Wikipedia&lt;/a&gt; &lt;a href=&quot;#fnref:phil-chromo&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:abelson&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Abelson_murine_leukemia_virus&quot;&gt;Abelson murine leukemia virus - Wikipedia&lt;/a&gt; &lt;a href=&quot;#fnref:abelson&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Masonry</title>
   <link href="http://localhost:4000/ios%20development/2016/12/03/masonry.html"/>
   <updated>2016-12-03T21:18:00+08:00</updated>
   <id>http://localhost:4000/ios%20development/2016/12/03/masonry</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
Use Masonry to implement autolayout programmatically. Learn how to use it. A detailed note here!
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Harness the power of AutoLayout NSLayoutConstraints with a simplified, chainable and expressive syntax. Supports iOS and OSX Auto Layout&lt;sup id=&quot;fnref:masonry&quot;&gt;&lt;a href=&quot;#fn:masonry&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The content below is my notes from reading Introduction on Masonry’s Github Page&lt;sup id=&quot;fnref:masonry:1&quot;&gt;&lt;a href=&quot;#fn:masonry&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-use-masonry&quot;&gt;Why use Masonry?&lt;/h2&gt;
&lt;p&gt;Under the hood Auto Layout is a powerful and flexible way of organising and laying out your views. However &lt;strong&gt;creating constraints from code is verbose and not very descriptive&lt;/strong&gt;. Imagine a simple example in which you want to have a view fill its superview but inset by 10 pixels on every side&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;prepare-to-meet-your-maker&quot;&gt;Prepare to meet your Maker!&lt;/h2&gt;
&lt;p&gt;Create constraints using MASConstraintMaker:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;UIEdgeInsets&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIEdgeInsetsMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mas_makeConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MASConstraintMaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//with is an optional semantic filler
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or even shorter&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mas_makeConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MASConstraintMaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;important-notes&quot;&gt;IMPORTANT NOTES:&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;We had to add the constraints to the superview [superview addConstraints:…. using autolayout. Masonry however will &lt;strong&gt;automagically add constraints to the appropriate view&lt;/strong&gt;.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Masonry will also &lt;strong&gt;automagically&lt;/strong&gt; call &lt;code class=&quot;highlighter-rouge&quot;&gt;view1.translatesAutoresizingMaskIntoConstraints = NO;&lt;/code&gt; for you.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not all things are created equal&lt;/p&gt;

&lt;p&gt;.&lt;code class=&quot;highlighter-rouge&quot;&gt;equalTo&lt;/code&gt; equivalent to NSLayoutRelationEqual&lt;/p&gt;

&lt;p&gt;.&lt;code class=&quot;highlighter-rouge&quot;&gt;lessThanOrEqualTo&lt;/code&gt; equivalent to NSLayoutRelationLessThanOrEqual&lt;/p&gt;

&lt;p&gt;.&lt;code class=&quot;highlighter-rouge&quot;&gt;greaterThanOrEqualTo&lt;/code&gt; equivalent to NSLayoutRelationGreaterThanOrEqual
These three equality constraints accept one argument which can be any of the following:&lt;/p&gt;

&lt;h3 id=&quot;masviewattribute&quot;&gt;1. MASViewAttribute&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-make.centerX.lessThanOrEqualTo(view2.mas_left);```&quot;&gt;
### 2. UIView/NSView

if you want `view.left` to be greater than or equal to `label.left` :

```objc
//these two constraints are exactly the same
make.left.greaterThanOrEqualTo(label);
make.left.greaterThanOrEqualTo(label.mas_left);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;nsnumber&quot;&gt;3. NSNumber&lt;/h3&gt;

&lt;p&gt;Auto Layout allows width and height to be set to constant values. if you want to set view to have a minimum and maximum width you could pass a number to the equality blocks:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//width &amp;gt;= 200 &amp;amp;&amp;amp; width &amp;lt;= 400
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greaterThanOrEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;@200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lessThanOrEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;@400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However Auto Layout does not allow alignment attributes such as left, right, centerY etc to be set to constant values. So if you pass a NSNumber for these attributes Masonry will turn these into constraints relative to the view’s superview ie:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//creates view.left = view.superview.left + 10
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lessThanOrEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;@10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Instead of using NSNumber, you can use primitives and structs to build your constraints, like so:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGSizeMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIEdgeInsetsMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIEdgeInsetsMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By default, macros which support autoboxing are prefixed with mas_. Unprefixed versions are available by defining MAS_SHORTHAND_GLOBALS before importing Masonry.&lt;/p&gt;

&lt;h3 id=&quot;nsarray&quot;&gt;4. NSArray&lt;/h3&gt;

&lt;p&gt;An array of a mixture of any of the previous types&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(@[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(@[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(@[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;@100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;where-should-i-create-my-constraints&quot;&gt;Where should I create my constraints?&lt;/h2&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DIYCustomView&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// --- Create your views here ---
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// tell UIKit that you are using AutoLayout
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requiresConstraintBasedLayout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// this is Apple's recommended place for adding/updating constraints
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updateConstraints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// --- remake/update constraints here
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remakeConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MASConstraintMaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttonSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttonSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//according to apple super should be called at end of method
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didTapButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// --- Do your changes ie change variables that affect your layout etc ---
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttonSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// tell constraints they need updating
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setNeedsUpdateConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;liuyanwei-lijichuan&quot;&gt;中文资料&lt;sup id=&quot;fnref:liuyanwei&quot;&gt;&lt;a href=&quot;#fn:liuyanwei&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&quot;fnref:lijichuan&quot;&gt;&lt;a href=&quot;#fn:lijichuan&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h4 id=&quot;masonry---httpliuyanweijumppocom20150614ios-library-masonryhtml&quot;&gt;&lt;a href=&quot;http://liuyanwei.jumppo.com/2015/06/14/ios-library-masonry.html&quot;&gt;Masonry的使用 - 刘彦玮&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&quot;masonryautolayout---httpadad184com20140928use-masonry-to-quick-solve-autolayout&quot;&gt;&lt;a href=&quot;http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/&quot;&gt;Masonry介绍与使用实践(快速上手Autolayout) - 里脊串&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:masonry&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/SnapKit/Masonry&quot;&gt;Masonry - Github&lt;/a&gt; &lt;a href=&quot;#fnref:masonry&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:masonry:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:liuyanwei&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://liuyanwei.jumppo.com/2015/06/14/ios-library-masonry.html&quot;&gt;Masonry的使用 - 刘彦玮&lt;/a&gt; &lt;a href=&quot;#fnref:liuyanwei&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:lijichuan&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/&quot;&gt;Masonry介绍与使用实践(快速上手Autolayout) - 里脊串&lt;/a&gt; &lt;a href=&quot;#fnref:lijichuan&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Should I Use Storyboards or Not?</title>
   <link href="http://localhost:4000/ios%20development/2016/12/03/storyboard-or-not.html"/>
   <updated>2016-12-03T20:08:00+08:00</updated>
   <id>http://localhost:4000/ios%20development/2016/12/03/storyboard-or-not</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
Storyboards are a quick and easy way to start building a simple app. But should you use Storyboards on more complex apps? Or on a team? What are the pros and cons of using them? Do experienced iOS developers use them? Are any mainstream apps built with Storyboards?
&lt;/div&gt;

&lt;h2 id=&quot;i-what-are-the-pros-and-cons-of-using-storyboardsroadfire&quot;&gt;I. What are the pros and cons of using Storyboards?&lt;sup id=&quot;fnref:roadfire&quot;&gt;&lt;a href=&quot;#fn:roadfire&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h3 id=&quot;pros&quot;&gt;Pros:&lt;/h3&gt;
&lt;p&gt;The biggest benefit of using Storyboards (especially over nibs/xibs) is that &lt;strong&gt;you can see how the screens in your app are related&lt;/strong&gt;. When you’re just starting on an existing project (or coming back to an old one), Storyboards give you an easy way to follow the flow through the app and zoom out to get a high level overview of what the app does.&lt;/p&gt;

&lt;p&gt;Another benefit to using Storyboards (over creating views programmatically) is that &lt;strong&gt;you get to see what your view will look like at runtime without having to run your app&lt;/strong&gt;. You can quickly make a change in Interface Builder and immediately see what it’ll look like – without waiting for Xcode to compile and run. (Nibs/xibs get this benefit, too.)&lt;/p&gt;

&lt;p&gt;And a third benefit is that &lt;strong&gt;you can create static table views in Storyboards&lt;/strong&gt;. So if you have a Settings screen, for example, with tappable rows of static text, Storyboards allow you to quickly and easily create them – no code required.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;cons&quot;&gt;Cons:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;On teams&lt;/strong&gt;, Storyboards are tricky to use for two main reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Merge conflicts are painful&lt;/strong&gt;: When two people edit the same Storyboard file at the same time and cause a merge conflict, it’s tricky to sort out how to merge the changes. Part of this is because of the format of the Storyboard file (it’s XML) and part of it is because Xcode rearranges elements and makes changes in the Storyboard when you open it – even if you don’t touch anything. And when you do touch something, it’s that much worse.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Code reviews are tricky&lt;/strong&gt;: If you conduct code reviews on your team, reviewing changes to a Storyboard file is… difficult. Again, the format is XML with lots of hard-to-understand attributes and elements, so reviewing a diff and making constructive comments is just not easy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And those are just the cons to working on a team. Even if you’re working &lt;strong&gt;on your ow&lt;/strong&gt;n, there are some cons to using Storyboards:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Confusion when they become complicated&lt;/strong&gt;: If you have a relatively large app and you keep adding new view controllers, your Storyboard will eventually become complicated. Those pretty arrows that connect one view controller to the next start overlapping each other or getting hidden under view controllers – and it’s really hard to see what’s happening in the app.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Xcode grinds to a halt when opening a large Storyboard&lt;/strong&gt;: Again, if you’re working on a relatively large app, Storyboards can be difficult since it takes Xcode a while to load them into the editor. I’m working on a project with about 30 view controllers in a Storyboard, and it takes multiple seconds (around 4-5) to load the Storyboard whenever I want to edit it. (And yes, my MBP is fast.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whenever I’ve worked on a team, we’ve agreed to &lt;strong&gt;create separate Storyboards for different flows to avoid the confusion and performance issues of massive Storyboards.&lt;/strong&gt; And we’ve always been careful to communicate about which Storyboard we’re working on before we start to make changes so we can avoid having to deal with messy merge conflicts. The code review issue exists, and will continue to exist, until Apple changes the format of the XML in the Storyboard file.&lt;/p&gt;

&lt;h2 id=&quot;ii-why-im-abandoning-storyboardsgopalkri&quot;&gt;II. Why I’m Abandoning Storyboards&lt;sup id=&quot;fnref:gopalkri&quot;&gt;&lt;a href=&quot;#fn:gopalkri&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;p&gt;Here’s a list of reasons as to why I’m abandoning the storyboard:&lt;/p&gt;

&lt;h3 id=&quot;diffs&quot;&gt;1. Diffs&lt;/h3&gt;
&lt;p&gt;Storyboards can’t be diffed meaningfully. Since they serialize to unreadable XML, it’s more or less impossible to look at a diff of a storyboard and figure out what really changed.&lt;/p&gt;

&lt;h3 id=&quot;merges&quot;&gt;2. Merges&lt;/h3&gt;
&lt;p&gt;Because storyboards can’t be read by human beings, merging or rebasing storyboards across branches is an absolute nightmare. It often results in re-creating the work on one of the branches manually.&lt;/p&gt;

&lt;h3 id=&quot;opening-a-file-modifies-it&quot;&gt;3. Opening a file modifies it&lt;/h3&gt;
&lt;p&gt;I’m not sure why this happens, and it doesn’t happen all the time, but I’ve often found that merely opening a Storyboard file modifies it. This is super irritating, because I’m no longer sure about whether or not I made a change to it that matters.&lt;/p&gt;

&lt;h3 id=&quot;code-review&quot;&gt;4. Code review&lt;/h3&gt;
&lt;p&gt;A broken storyboard can completely break the app (like say, if you’ve got an ambiguous constraint), so it must be code reviewed like all other code. However, because of the above reasons, it is really hard to do a proper code review.&lt;/p&gt;

&lt;h3 id=&quot;usefulness&quot;&gt;5. Usefulness&lt;/h3&gt;
&lt;p&gt;One of the goals of using Storyboards is to be able to visualize what the app will look like without actually running it. In reality, though, storyboards don’t really come close. 
&lt;img src=&quot;http://gopalkri.com/assets/images/2016-05-27-Storyboards-Visualization.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-im-doing-instead&quot;&gt;What I’m doing instead&lt;/h2&gt;
&lt;p&gt;I’m going to be using AutoLayout in code. While NSLayoutConstraint is incredibly verbose, there’re a few open source libraries that appear to make it significantly less painful: SnapKit, EasyPeasy, SwiftAutoLayout, etc. I’m not a big fan of the ASCII art version of NSLayoutConstraint. As awesome as it is, it’s stringly typed, and I try and avoid stringly typed code whenever possible.&lt;/p&gt;

&lt;h2 id=&quot;iii-ios-user-interfaces-storyboards-vs-nibs-vs-custom-codetoptal&quot;&gt;III. iOS User Interfaces: Storyboards vs. NIBs vs. Custom Code&lt;sup id=&quot;fnref:toptal&quot;&gt;&lt;a href=&quot;#fn:toptal&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h3 id=&quot;ios-storyboards&quot;&gt;iOS Storyboards&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;A classic beginner’s mistake is to create one massive project-wide Storyboard. A Storyboard is a board with a story to tell. It shouldn’t be used to mix unrelated stories into one big volume.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As its name implies, a Storyboard is a board with a story to tell. It shouldn’t be used to mix unrelated stories into one big volume. A storyboard should contain view controllers that are logically related to each other—which doesn’t mean every view controller.&lt;/p&gt;

&lt;p&gt;For example, it makes sense to use Storyboards when handling:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A set of views for authentication and registration.&lt;/li&gt;
  &lt;li&gt;A multi-step order entry flow.&lt;/li&gt;
  &lt;li&gt;A wizard-like (i.e., tutorial) flow.&lt;/li&gt;
  &lt;li&gt;A master-detail set of views (e.g., profiles lists, profile details).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Meanwhile, large Storyboards should be avoided, including single app-wide Storyboards (unless the app is relatively simple). Before we go any deeper, let’s see why.&lt;/p&gt;

&lt;h4 id=&quot;when-to-use-storyboards&quot;&gt;When to use Storyboards:&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;Storyboards are best used with multiple interconnected view controllers, as their major simplification is in transitioning between view controllers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;when-not-to-use-ios-storyboards&quot;&gt;When Not to Use iOS Storyboards&lt;/h4&gt;

&lt;p&gt;A few cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The view has a complicated or dynamic layout, best-implemented with code.&lt;/li&gt;
  &lt;li&gt;The view is already implemented with NIBs or code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In those cases, we can either leave the view out of the Storyboard or embed it in a view controller. The former breaks the Storyboard’s visual flow, but doesn’t have any negative functional or development implications. The latter retains this visual flow, but it requires additional development efforts as the view is not integrated into the view controller: it’s just embedded as a component, hence the view controller must interact with the view rather than implementing it.&lt;/p&gt;

&lt;h3 id=&quot;ios-custom-code-programmatic-uis&quot;&gt;iOS Custom Code (Programmatic UIs)&lt;/h3&gt;

&lt;h4 id=&quot;pro-under-the-hood&quot;&gt;Pro: Under the Hood&lt;/h4&gt;
&lt;p&gt;The greatest advantage of creating an iOS UI programmatically: if you know how to code a user interface, then you know what happens under the hood, whereas the same is not necessarily true of NIBs and Storyboards.&lt;/p&gt;

&lt;p&gt;So, mastering the coding of iOS user interfaces gives you more control over and greater awareness of how these pieces fit together, which raises your upper-bound as a developer.&lt;/p&gt;

&lt;h4 id=&quot;when-to-use-code&quot;&gt;When to Use Code&lt;/h4&gt;

&lt;p&gt;It’s often a good call to use use custom code for iOS user interface design when you have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dynamic layouts.&lt;/li&gt;
  &lt;li&gt;Views with effects, such as rounded corners, shadows, etc.&lt;/li&gt;
  &lt;li&gt;Any case in which using NIBs and Storyboards is complicated or infeasible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;when-not-to-use-code&quot;&gt;When Not to Use Code&lt;/h4&gt;

&lt;p&gt;In general, code-made UIs can always be used. They’re rarely a bad idea, so I’d put an here.&lt;/p&gt;

&lt;p&gt;Fore complete information, check the references.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:roadfire&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://roadfiresoftware.com/2015/03/the-pros-and-cons-of-using-storyboards/&quot;&gt;Should you use Storyboards on more complex apps?&lt;/a&gt; &lt;a href=&quot;#fnref:roadfire&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:gopalkri&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://gopalkri.com/2016/05/27/why-im-abandoning-storyboards/&quot;&gt;Why I’m Abandoning Storyboards&lt;/a&gt; &lt;a href=&quot;#fnref:gopalkri&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:toptal&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.toptal.com/ios/ios-user-interfaces-storyboards-vs-nibs-vs-custom-code&quot;&gt;iOS User Interfaces: Storyboards vs. NIBs vs. Custom Code&lt;/a&gt; &lt;a href=&quot;#fnref:toptal&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Sort Tags Alphabetically</title>
   <link href="http://localhost:4000/web%20development/2016/11/30/sort-tag-alphabetically.html"/>
   <updated>2016-11-30T20:32:00+08:00</updated>
   <id>http://localhost:4000/web%20development/2016/11/30/sort-tag-alphabetically</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
Unordered tags make a Jekyll tag list look sloppy, so if you care about the details, you likely want your tag list to be alphabetized.
&lt;br /&gt;KF 11/30/2016
&lt;/div&gt;

&lt;h2 id=&quot;sort-tags-a--z&quot;&gt;Sort Tags A ~ Z&lt;/h2&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.lanyonm.org/articles/2013/11/21/alphabetize-jekyll-page-tags-pure-liquid.html&quot;&gt;Michael Lanyon - Alphabetizing Jekyll Page Tags In Pure Liquid (Without Plugins)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.siteleaf.com/blog/advanced-liquid-sort/&quot;&gt;Advanced Liquid: Sort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on the notes from &lt;a href=&quot;https://blog.lanyonm.org&quot;&gt;Michael Lanyon&lt;/a&gt;, I modified my &lt;code class=&quot;highlighter-rouge&quot;&gt;tags.html&lt;/code&gt; to the version below:&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: page
title: Tags
---
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- tag sorted - kf 11/30/2016 --&amp;gt;&lt;/span&gt;

{% capture site_tags %}{% for tag in site.tags %}{{ tag | first }}{% unless forloop.last %},{% endunless %}{% endfor %}{% endcapture %}
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- site_tags: {{ site_tags }} --&amp;gt;&lt;/span&gt;
{% assign tag_words = site_tags | split:',' | sort %}
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- tag_words: {{ tag_words }} --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tags-expo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tags-expo-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% for tag in tag_words %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#{{ tag | cgi_escape }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-tag&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ tag }} &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;font-size:80%; color:gray;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ site.tags[tag] | size }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  {% endfor %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tags-expo-section&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    {% for item in (0..site.tags.size) %}{% unless forloop.last %}
    {% capture this_word %}{{ tag_words[item] | strip_newlines }}{% endcapture %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ this_word | cgi_escape }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ this_word }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tags-expo-posts&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      {% for post in site.tags[this_word] %}{% if post.title != null %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-title&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.baseurl }}{{ post.url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        {{ post.title }} &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;laquo 
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;small&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-date&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.date | date_to_string }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/small&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      {% endif %}{% endfor %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    {% endunless %}{% endfor %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;categories.html&lt;/code&gt; the basic idea is the same.&lt;/p&gt;

&lt;p&gt;When Adding the code block above, I came across a curious problem when writing liquid template code in this markdown file. When Jekyll compiles the static web files, it tries to process all the curly brackets like: &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is not a bug , but a &lt;a href=&quot;https://github.com/jekyll/jekyll/issues/814&quot;&gt;caveat of using a templating language with markdown&lt;/a&gt;. The workarounds are provided by&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ozzieliu.com/2016/04/26/writing-liquid-template-in-markdown-with-jekyll/&quot;&gt;Ozzie Liu - Writing Liquid Template in Markdown Code Blocks with Jekyll&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Simply put, just add&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endraw&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; on the both end when &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;/code&gt; appears.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is pretty confused to render the above line!!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;advanced---sort-tags-az-case-insensitive&quot;&gt;Advanced - Sort Tags A~Z Case Insensitive&lt;/h2&gt;

&lt;h3 id=&quot;reference-1&quot;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Shopify/liquid/issues/529&quot;&gt;Add case-insensitive sort #529&lt;/a&gt;
&lt;a href=&quot;https://github.com/jekyll/jekyll/issues/2135&quot;&gt;Sort only sorts in binary #2135&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;solution-is-simple&quot;&gt;Solution is simple:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;some_list | sort: 'downcase'&lt;/code&gt; for strings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to Offset an HTML Anchor to Adjust for Fixed Header?</title>
   <link href="http://localhost:4000/web%20development/2016/11/30/anchor-link-back-position-setting.html"/>
   <updated>2016-11-30T20:32:00+08:00</updated>
   <id>http://localhost:4000/web%20development/2016/11/30/anchor-link-back-position-setting</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
I have a header that is fixed to the top of the page, so when you link to an anchor elsewhere in the page, the page jumps so the anchor is at the top of the page, leaving the content behind the fixed header (I hope that makes sense). I need a way to offset the anchor by some pixels from the height of the header. I would prefer HTML or CSS, but Javascript would be acceptable as well.
&lt;br /&gt;KF 11/30/2016
&lt;/div&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/4086107/html-positionfixed-page-header-and-in-page-anchors&quot;&gt;HTML position:fixed page header and in-page anchors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/10732690/offsetting-an-html-anchor-to-adjust-for-fixed-header&quot;&gt;offsetting an html anchor to adjust for fixed header [duplicate]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Singleton in iOS</title>
   <link href="http://localhost:4000/ios%20development/2016/11/30/singleton.html"/>
   <updated>2016-11-30T14:53:00+08:00</updated>
   <id>http://localhost:4000/ios%20development/2016/11/30/singleton</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
What is the concept of singleton in iOS development?
&lt;br /&gt;KF 11/30/2016
&lt;/div&gt;

&lt;h2 id=&quot;what-is-singleton&quot;&gt;What is Singleton&lt;/h2&gt;
&lt;p&gt;A singleton object provides a global point of access to the resources of its class. Singletons are used in situations where this single point of control is desirable, such as with classes that offer some general service or resource. You obtain the global instance from a singleton class through a factory method.&lt;/p&gt;

&lt;h2 id=&quot;why-and-when-we-use-it&quot;&gt;Why and When We Use It?&lt;/h2&gt;
&lt;p&gt;You obtain the global instance from a singleton class through a factory method. The class lazily creates its sole instance the first time it is requested and thereafter ensures that no other instance can be created.&lt;sup id=&quot;fnref:apple&quot;&gt;&lt;a href=&quot;#fn:apple&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; It’s an extremely powerful way to share data between different parts of code without having to pass the data around manually.&lt;sup id=&quot;fnref:matt&quot;&gt;&lt;a href=&quot;#fn:matt&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Singleton classes are an important concept to understand because they exhibit an extremely useful design pattern. This idea is used throughout the iPhone SDK, for example, UIApplication has a method called sharedApplication which when called from anywhere will return the UIApplication instance which relates to the currently running application.&lt;sup id=&quot;fnref:matt:1&quot;&gt;&lt;a href=&quot;#fn:matt&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;how-to-implementmatt&quot;&gt;How to Implement?&lt;sup id=&quot;fnref:matt:2&quot;&gt;&lt;a href=&quot;#fn:matt&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;p&gt;You can implement a singleton class in Objective-C using the following code:&lt;/p&gt;

&lt;p&gt;in &lt;code class=&quot;highlighter-rouge&quot;&gt;MyManager.h&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;foundation/Foundation.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;in &lt;code class=&quot;highlighter-rouge&quot;&gt;MyManager.m&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;MyManager.h&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyManager&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@synthesize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#pragma mark Singleton Methods
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedMyManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_once_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onceToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onceToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sharedMyManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedMyManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;someProperty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;Default Property Value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealloc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Should never be called, but just here for clarity really.
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What this does is it defines a static variable (but only global to this &lt;a href=&quot;http://en.wikipedia.org/wiki/Translation_unit_(programming)&quot;&gt;translation unit&lt;/a&gt;) called &lt;code class=&quot;highlighter-rouge&quot;&gt;sharedMyManager&lt;/code&gt; which is then initialized once and only once in &lt;code class=&quot;highlighter-rouge&quot;&gt;sharedManager&lt;/code&gt;. The way we ensure that it’s only created once is by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_once&lt;/code&gt; method from &lt;a href=&quot;http://developer.apple.com/library/ios/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html&quot;&gt;Grand Central Dispatch (GCD)&lt;/a&gt;. This is thread safe and handled entirely by the OS for you so that you don’t have to worry about it at all.&lt;/p&gt;

&lt;p&gt;However, if you would rather not use GCD then you should use the following code for sharedManager:&lt;/p&gt;

&lt;p&gt;Non-GCD based code:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedMyManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@synchronized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedMyManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sharedMyManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedMyManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then you can reference the singleton from anywhere by calling the following function:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MyManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sharedManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve used this extensively throughout my code for things such as creating a singleton to handle CoreLocation or CoreData functions.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:apple&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Singleton.html&quot;&gt;Singleton - Apple Developer&lt;/a&gt; &lt;a href=&quot;#fnref:apple&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:matt&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.galloway.me.uk/tutorials/singleton-classes/&quot;&gt;Singletons in Objective-C - Matt Galloway&lt;/a&gt; &lt;a href=&quot;#fnref:matt&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:matt:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:matt:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>What is the difference between a static and const variable</title>
   <link href="http://localhost:4000/ios%20development/2016/11/30/static-constant.html"/>
   <updated>2016-11-30T14:42:00+08:00</updated>
   <id>http://localhost:4000/ios%20development/2016/11/30/static-constant</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
Static VS. Constant
&lt;br /&gt;KF 11/30/2016
&lt;/div&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; variable means that the object’s lifetime is the entire execution of the program and it’s value is initialized only once before the program startup. All statics are initialized if you do not explicitly set a value to them.The manner and timing of static initialization is unspecified.&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; is a promise that you will not try to modify the value once set.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; is equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;#define&lt;/code&gt; but only for value statements(e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;#define myvalue 2&lt;/code&gt;). The value declared replaces the name of the variable before compilation.&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/y5f6w579.aspx#static&quot;&gt;Static (C++) - on MSDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2216239/what-is-the-difference-between-a-static-and-const-variable&quot;&gt;static vs. const - on StackOverflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Notifications - Example</title>
   <link href="http://localhost:4000/ios%20development/2016/11/29/notification.html"/>
   <updated>2016-11-29T12:30:00+08:00</updated>
   <id>http://localhost:4000/ios%20development/2016/11/29/notification</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
This is a simple example of how to post and listen to a notification radio.
&lt;br /&gt;KF 11/29/2016
&lt;/div&gt;

&lt;h2 id=&quot;what-is-a-notification&quot;&gt;What is a Notification?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Reference: &lt;a href=&quot;http://www.informit.com/articles/article.aspx?p=2091958&quot;&gt;How Best to Use Delegates and Notifications in Objective-C&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Notifications provide a means of broadcasting a message from anywhere to anywhere. The &lt;code class=&quot;highlighter-rouge&quot;&gt;NSNotification&lt;/code&gt; class provides this functionality in Objective-C. It is not strictly a part of the language, but rather the Foundation framework. Instances of NSNotification are broadcast through an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSNotificationCenter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notifications contain a name, an object and a dictionary of metadata. The object and metadata are optional, but the name is required. An object can register with the notification center to receive certain notifications, filtered by name, object or both name and object. Additionally, a selector is passed, which is called when a notification matching the filter is broadcast.
An example of a notification is as follows:
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Registering as observer from one object
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNotificationCenter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;
                                         &lt;span class=&quot;nf&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thingHappened&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                             &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyThingHappened&lt;/span&gt;
                                           &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_myObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Posting notification from another object
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNotificationCenter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postNotificationName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyThingHappened&lt;/span&gt;
                                                    &lt;span class=&quot;nf&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;
                                                  &lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this example one object is registering itself as an observer for the MyThingHappened notification, limiting it to when that notification occurs on the exact object, &lt;code class=&quot;highlighter-rouge&quot;&gt;_myObject&lt;/code&gt;. Then, another object is posting that notification with itself as the object and nothing as the metadata dictionary, &lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;. So in this case, if the object that’s posting the notification is &lt;code class=&quot;highlighter-rouge&quot;&gt;_myObject&lt;/code&gt; from the context of the registering object, then the notification will cause thingHappened: to be called.&lt;/p&gt;

&lt;h2 id=&quot;why-and-when-to-use-notification&quot;&gt;Why and When to Use Notification?&lt;/h2&gt;

&lt;h3 id=&quot;coupling&quot;&gt;Coupling&lt;/h3&gt;
&lt;p&gt;Notifications result in loose coupling between objects. The coupling is &lt;strong&gt;loose&lt;/strong&gt; because the object sending a notification doesn’t know what is listening to the notification. This loose coupling can be extremely powerful because multiple objects can all register to listen to the same notification, from different parts of an application. However, loose coupling can also make the use of notifications a nightmare to debug, since code can easily become entangled. Following the code paths produced when a notification is broadcast can become a daunting experience.&lt;/p&gt;

&lt;h3 id=&quot;multiple-listeners&quot;&gt;Multiple Listeners&lt;/h3&gt;
&lt;p&gt;By design, notifications offer multiple listeners. There can be zero, one or many listeners for any one notification. If you are certain that you’ll need multiple listeners, a notification is the correct route to go down. The instance above of login state handling is a perfect example of this. It’s likely that multiple objects are going to care about login state changing, so a notification makes sense.&lt;/p&gt;

&lt;h3 id=&quot;is-the-object-known&quot;&gt;Is the Object Known?&lt;/h3&gt;
&lt;p&gt;Sometimes you don’t actually know the precise object you want to communicate with. An example of such a scenario is the keyboard in iOS, which is a view which is handled entirely by iOS for you.&lt;/p&gt;

&lt;h2 id=&quot;example-in-my-project---timepocket&quot;&gt;Example in my project - TimePocket&lt;/h2&gt;
&lt;p&gt;In my project ‘TimePocket’, I use notification to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;managedObjectContext&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; at a proper time during the life cycle.&lt;/p&gt;

&lt;h3 id=&quot;create-a-header-file---preparing-for-the-notification&quot;&gt;1. Create a Header File - Preparing for the Notification&lt;/h3&gt;
&lt;p&gt;Create a header file called &lt;code class=&quot;highlighter-rouge&quot;&gt;EventDatabaseAvailability.h&lt;/code&gt;
In the file add the following two constants:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define EventDatabaseAvailabilityNotification @&quot;EventDatabaseAvailabilityNotification&quot;
#define EventDatabaseAvailabilityContext @&quot;Context&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;post-notification&quot;&gt;2. Post Notification&lt;/h3&gt;
&lt;p&gt;When the initialization of my database is completed, I post my notification there in order to pass the &lt;code class=&quot;highlighter-rouge&quot;&gt;managedObjectContext&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Post notification code:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventDatabaseContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;@{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventDatabaseAvailabilityContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventDatabaseContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNotificationCenter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postNotificationName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventDatabaseAvailabilityNotification&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;listen-to-the-notification&quot;&gt;3. Listen to the Notification&lt;/h3&gt;
&lt;p&gt;In my &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;, the notification observer should be added as early as possible in its life cycle. Therefore, it’s added in &lt;code class=&quot;highlighter-rouge&quot;&gt;awakeFromNib&lt;/code&gt;, which is the earliest part in the controller’s life cycle.&lt;/p&gt;

&lt;p&gt;Add the notification observer in &lt;code class=&quot;highlighter-rouge&quot;&gt;- (void)awakeFromNib&lt;/code&gt; to listen to the notification.&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awakeFromNib&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;awakeFromNib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// KF 11/28/2016
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Listen to the Notification from AppDelegate
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNotificationCenter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;addObserverForName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventDatabaseAvailabilityNotification&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;usingBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNotification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Nonnull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;managedObjectContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;EventDatabaseAvailabilityContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Collection View II - Designing Your Data Source and Delegate</title>
   <link href="http://localhost:4000/ios%20development/2016/11/28/collection-view-ii.html"/>
   <updated>2016-11-28T14:00:00+08:00</updated>
   <id>http://localhost:4000/ios%20development/2016/11/28/collection-view-ii</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
Continue - Collection View learning notes on reading Apple Guide Document &quot; Collection View Programming Guide for iOS&quot;.
&lt;br /&gt;KF 11/28/2016
&lt;/div&gt;

&lt;h1 id=&quot;iidesigning-your-data-source-and-delegate&quot;&gt;II.Designing Your Data Source and Delegate&lt;/h1&gt;
&lt;p&gt;The &lt;strong&gt;data source&lt;/strong&gt; object is the content that your app displays. The only requirement of the data source is that it must be able to provide information that the collection view needs, such as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how many items there are and&lt;/li&gt;
  &lt;li&gt;which views to use when displaying those items.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;delegate object&lt;/strong&gt; is an optional (but recommended) object that manages aspects related to the presentation of and interaction with your content.  Although the delegate’s main job is to manage cell highlighting and selection, it can be extended to provide additional information. For example, the flow layout extends the basic delegate behavior to customize layout metrics, such as the size of cells and the spacing between them.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-data-source-manages-your-content&quot;&gt;The Data Source Manages Your Content&lt;/h2&gt;
&lt;p&gt;The data source object is the object responsible for managing the content you are presenting using a collection view. The data source object must conform to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDataSource&lt;/code&gt; protocol, which defines the basic behavior and methods that you must support. The job of the data source is to provide the collection view with answers to the following questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many sections does the collection view contain?&lt;/li&gt;
  &lt;li&gt;For a given section, how many items does a section contain?&lt;/li&gt;
  &lt;li&gt;For a given section or item, what views should be used to display the corresponding content?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sections&lt;/strong&gt; and &lt;strong&gt;items&lt;/strong&gt; are the fundamental organizing principle for collection view content.
A collection view typically has &lt;strong&gt;at least one section&lt;/strong&gt; and may contain more. Each section, in turn, contains &lt;strong&gt;zero&lt;/strong&gt; or more items. Items represent the main content you want to present, whereas sections organize those items into logical groups. For example, a photo app might use sections to represent a single album of photos or a set of photos taken on the same day.&lt;/p&gt;

&lt;p&gt;The collection view refers to the data it contains using NSIndexPath objects. When trying to locate an item, the collection view uses the index path information provided to it by the layout object. For items, the index path contains a section number and an item number. For supplementary and decoration views, the index path contains whichever values were provided by the layout object.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Although standard index paths support multiple levels, the collection view’s cells only supports index paths that are 2-levels deep with “section” and “item” parameters, much like the index paths for the UITableView class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Different layout objects could present section and item data very differently, as shown in &lt;strong&gt;Figure 2-1&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;centerfigure-2-1-sections-arranged-according-to-the-arrangement-of-layout-objectscenter&quot;&gt;&lt;center&gt;Figure 2-1. Sections arranged according to the arrangement of layout objects&lt;/center&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/public/img/20161128-2-1.png&quot; alt=&quot;figure-2-1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;designing-your-data-objects&quot;&gt;Designing Your Data Objects&lt;/h3&gt;
&lt;p&gt;Organizing your data into sections and items makes it much easier to implement your data source methods later. And because your data source methods are called frequently, you want to make sure that your implementations of those methods are able to retrieve data as quickly as possible.&lt;/p&gt;

&lt;p&gt;One simple solution (but certainly not the only solution) is for your data source to use a set of nested arrays, as shown in &lt;strong&gt;Figure 2-2&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;centerfigure-2-2-arranging-data-objects-using-nested-arrayscenter&quot;&gt;&lt;center&gt;Figure 2-2. Arranging data objects using nested arrays&lt;/center&gt;&lt;/h4&gt;

&lt;center&gt;&lt;img src=&quot;/public/img/20161128-2-2.png&quot; width=&quot;5000&quot; /&gt;&lt;/center&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In general, your data objects should never be a performance bottleneck. The collection view usually accesses your data source only to calculate how many objects there are in total and to obtain views for elements that are currently onscreen. If the layout object relies only on data from your data objects, performance could be severely impacted when the data source contains thousands of objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;telling-the-collection-view-about-your-content&quot;&gt;Telling the Collection View About Your Content&lt;/h3&gt;
&lt;p&gt;Among the questions asked of your data source by the collection view are how many sections it contains and how many items each section contains. The collection view asks your data source to provide this information when any of the following actions occur:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The collection view is displayed for the first time.&lt;/li&gt;
  &lt;li&gt;You assign a different data source object to the collection view.&lt;/li&gt;
  &lt;li&gt;You explicitly call the collection view’s &lt;code class=&quot;highlighter-rouge&quot;&gt;reloadData&lt;/code&gt; method.&lt;/li&gt;
  &lt;li&gt;The collection view delegate executes a block using &lt;code class=&quot;highlighter-rouge&quot;&gt;performBatchUpdates:completion:&lt;/code&gt; or any of the move, insert, or delete methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You provide the number of sections using the &lt;code class=&quot;highlighter-rouge&quot;&gt;numberOfSectionsInCollectionView:&lt;/code&gt; method, and the number of items in each section using the &lt;code class=&quot;highlighter-rouge&quot;&gt;collectionView:numberOfItemsInSection:&lt;/code&gt; method. You must implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;collectionView:numberOfItemsInSection:&lt;/code&gt; method, but if your collection view has only one section, implementing the &lt;code class=&quot;highlighter-rouge&quot;&gt;numberOfSectionsInCollectionView:&lt;/code&gt; method is optional. Both methods return integer values with the appropriate information.&lt;/p&gt;

&lt;p&gt;If you implemented your data source as shown in Figure 2-2, the implementation of your data source methods could be as simple as those shown below:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;numberOfSectionsInCollectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UICollectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;collectionView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// _data is a class member variable that contains one array per section.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_data&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UICollectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;collectionView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberOfItemsInSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sectionArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_data&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;objectAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sectionArray&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;configuring-cells-and-supplementary-views&quot;&gt;Configuring Cells and Supplementary Views&lt;/h2&gt;
&lt;p&gt;Another important task of your data source is to provide the views that the collection view uses to display your content. The collection view does not track your app’s content. It simply takes the views you give it and applies the current layout information to them. Therefore, everything that is displayed by the views is your responsibility.&lt;/p&gt;

&lt;p&gt;After your data source reports how many sections and items it manages, the collection view asks the layout object to provide layout attributes for the collection view’s content. At some point, the collection view asks the layout object to provide the list of elements in a specific rectangle (often this is the visible rectangle). The collection view uses that list to ask your data source for the corresponding cells and supplementary views. To provide those cells and supplementary views, your code must do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Embed your template cells and views in your storyboard file. (Alternatively, register a class or nib file for each type of supported cell or view.)&lt;/li&gt;
  &lt;li&gt;In your data source, dequeue and configure the appropriate cell or view when asked.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Collection View I - Intro & Basics</title>
   <link href="http://localhost:4000/ios%20development/2016/11/24/collection-view-i.html"/>
   <updated>2016-11-24T16:00:00+08:00</updated>
   <id>http://localhost:4000/ios%20development/2016/11/24/collection-view-i</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
&quot;Collection View is super powerful.&quot; This article includes notes on reading Apple Guide Document &quot; Collection View Programming Guide for iOS&quot;.
&lt;br /&gt;KF 11/24/2016
&lt;/div&gt;

&lt;h1 id=&quot;about-ios-collection-views&quot;&gt;About iOS Collection Views&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A collection view is a way to present an ordered set of data items using a flexible and changeable layout.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Collection views keep a strict separation between the data being presented and the visual elements used to present that data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In most cases, your app is solely responsible for managing the data. Your app also provides the view objects used to present that data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The collection view is all about the presentation and arrangement of your views and not about their content.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;Flow Layout&lt;/strong&gt; Supports Grids and Other Line-Oriented Presentations
&lt;!--more--&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;collection-view-basics&quot;&gt;Collection View Basics&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;your app must provide a data source object that tells the collection view how many items there are to display.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-classes-and-protocols-for-implementing-collection-views&quot;&gt;The Classes and Protocols for Implementing Collection Views&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Table 1-1&lt;/strong&gt; The classes and protocols for implementing collection views&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Purpose&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Classes/Protocols&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Top-level containment &lt;br /&gt;and management&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionView&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewController&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Content &lt;br /&gt;management&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDataSource&lt;/code&gt; protocol&lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDelegate&lt;/code&gt; protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Presentation&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionReusableView&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewCell&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Layout&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewLayout&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewLayoutAttributes&lt;/code&gt;&lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewUpdateItem&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Flow Layout&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewFlowLayout&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDelegateFlowLayout&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;uicollectionview&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionView&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionView&lt;/code&gt; object defines the visible area for your collection view’s content. This class also facilitates the presentation of your data based on the layout information it receives from its layout object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;uicollectionviewcontroller&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewController&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewController&lt;/code&gt; object provides view controller–level management support for a collection view. Its use is optional.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;uicollectionviewdatasource-protocol&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDataSource&lt;/code&gt; protocol&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;The data source object is the most important object associated with the collection view and is one that you must provide. The data source manages the content of the collection view and creates the views needed to present that content. To implement a data source object, you must create an object that conforms to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDataSource&lt;/code&gt; protocol.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;uicollectionviewdelegate-protocol&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDelegate&lt;/code&gt; protocol&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;The collection view delegate object lets you intercept interesting messages from the collection view and customize the view’s behavior. For example, you use a delegate object to track the selection and highlighting of items in the collection view. Unlike the data source object, the delegate object is optional.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;uicollectionreusableview--uicollectionviewcell&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionReusableView&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewCell&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;All views displayed in a collection view must be instances of the &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionReusableView&lt;/code&gt; class. This class supports a recycling mechanism in use by collection views. Recycling views (instead of creating new ones) improves performance in general and especially improves it during scrolling.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewCell&lt;/code&gt; object is a specific type of reusable view that you use for your main data items.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;uicollectionviewlayout-uicollectionviewlayoutattributes-uicollectionviewupdateitem&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewLayout&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewLayoutAttributes&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewUpdateItem&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Subclasses of &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewLayout&lt;/code&gt; are referred to as layout objects and are responsible for defining the location, size, and visual attributes of the cells and reusable views inside a collection view.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;During the layout process, a layout object creates layout attribute objects (instances of the &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewLayoutAttributes&lt;/code&gt; class) that tell the collection view where and how to display cells and reusable views.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The layout object receives instances of the &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewUpdateItem&lt;/code&gt; class whenever data items are inserted, deleted, or moved within the collection view. You never need to create instances of this class yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;uicollectionviewflowlayout--uicollectionviewdelegateflowlayout-protocol&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewFlowLayout&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDelegateFlowLayout&lt;/code&gt; protocol&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewFlowLayout&lt;/code&gt; class is a concrete layout object that you use to implement grids or other line-based layouts. You can use the class as-is or in conjunction with the flow delegate object, which allows you to customize the layout information dynamically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Figure 1-1&lt;/strong&gt; shows the relationship between the core objects associated with a collection view. The collection view gets information about the cells to display from its data source. The data source and delegate objects are custom objects provided by your app and used to manage the content, including the selection and highlighting of cells. The layout object is responsible for deciding where those cells belong and for sending that information to the collection view in the form of one or more layout attribute objects. The collection view then merges the layout information with the actual cells (and other views) to create the final visual presentation.&lt;/p&gt;

&lt;h4 id=&quot;center-figure-1-1-merging-content-and-layout-to-create-the-final-presentation-center&quot;&gt;&lt;center&gt; Figure 1-1. Merging content and layout to create the final presentation &lt;/center&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/public/img/20161124-1-1.png&quot; alt=&quot;figure-1-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When creating a collection view interface, you first add a UICollectionView object to your storyboard or nib file. Think of the collection view as the central hub, from which all other objects emanate. After adding that object, you can begin to configure any related objects, such as the data source or delegate. All configurations are centered around the collection view itself. For example, you never create a layout object without also creating a collection view object.&lt;/p&gt;

&lt;h2 id=&quot;reusable-views-improve-performance&quot;&gt;Reusable Views Improve Performance&lt;/h2&gt;
&lt;p&gt;Collection views employ a view recycling program to improve efficiency. As views move offscreen, they are removed from view and placed in a &lt;strong&gt;reuse queue&lt;/strong&gt; instead of being deleted. As new content is scrolled onscreen, views are removed from the queue and repurposed with new content. To facilitate this recycling and reuse, all views displayed by the collection view must descend from the &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionReusableView&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Collection views support three distinct types of reusable views, each of which has a specific intended usage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Cells&lt;/em&gt; present the main content of your collection view. The job of a cell is to present the content for a single item from your data source object. Each cell must be an instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewCell&lt;/code&gt; class, which you may subclass as needed to present your content. Cell objects provide inherent support for managing their own selection and highlight state. To actually apply a highlight to a cell, you must write some custom code. For information on implementing cell highlighting/selecting, see Managing the Visual State for Selections and Highlights.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Supplementary&lt;/em&gt; views display information about a section. Like cells, supplementary views are data driven. Unlike cells, supplementary views are not mandatory, and their usage and placement is controlled by the layout object being used. For example, the flow layout supports &lt;strong&gt;headers&lt;/strong&gt; and &lt;strong&gt;footers&lt;/strong&gt; as optional supplementary views.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Decoration&lt;/em&gt; views are visual adornments that are wholly owned by the layout object and are not tied to any data in your data source object. For example, a layout object might use decoration views to implement a custom background appearance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unlike table views, collection views impose no specific style on the cells and supplementary views provided by your data source. Instead, the basic reusable view classes are blank canvases for you to modify.&lt;/p&gt;

&lt;h2 id=&quot;the-layout-object-controls-the-visual-presentation&quot;&gt;The Layout Object Controls the Visual Presentation&lt;/h2&gt;
&lt;p&gt;The layout object is solely responsible for determining the placement and visual styling of items within the collection view. Although your data source object provides the views and the actual content, the layout object determines the size, location, and other appearance-related attributes of those views. This separation of responsibilities makes it possible to change layouts dynamically without changing any of the data objects managed by your app.&lt;/p&gt;

&lt;p&gt;The layout process used by collection views is related to, but distinct from, the layout process used by the rest of your app’s views. A layout object never touches the views it manages directly because it does not actually own any of those views. Instead, it generates attributes that describe the location, size, and visual appearance of the cells, supplementary views, and decoration views in the collection view. It is then the job of the collection view to apply those attributes to the actual view objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 1-2&lt;/strong&gt; shows how a vertically scrolling flow layout arranges its cells and supplementary views. In a vertically scrolling flow layout, the width of the content area remains fixed and the height grows to accommodate the content. To compute the area, the layout object places views and cells one at a time, choosing the most appropriate location for each. In the case of the flow layout, the size of the cells and supplementary views are specified as properties, either on the layout object or by using a delegate. Computing the layout is just a matter of using those properties to place each view.&lt;/p&gt;

&lt;h4 id=&quot;centerfigure-1-2--the-layout-object-provides-layout-metricscenter&quot;&gt;&lt;center&gt;Figure 1-2  The layout object provides layout metrics&lt;/center&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/public/img/20161128-1-1.png&quot; alt=&quot;figure-1-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Layout objects control more than just the size and position of their views. The layout object can specify other view-related attributes, such as its &lt;strong&gt;transparency&lt;/strong&gt;, its &lt;strong&gt;transform in 3D space&lt;/strong&gt;, and its &lt;strong&gt;visibility&lt;/strong&gt; (if any) above or below other views. These attributes let you create more interesting layouts. For example, you might create stacks of cells by placing the views on top of one another and changing their z-ordering, or you might use a transform to rotate them on any axis.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Core Data</title>
   <link href="http://localhost:4000/ios%20development/2016/11/20/core-data.html"/>
   <updated>2016-11-20T00:00:00+08:00</updated>
   <id>http://localhost:4000/ios%20development/2016/11/20/core-data</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
&quot;It's all about how core data works.&quot;
&lt;br /&gt;KF 11/20/2016
&lt;/div&gt;

&lt;h2 id=&quot;database&quot;&gt;Database&lt;/h2&gt;
&lt;p&gt;Some times you need to store large amount of data or query it in a sophisticated manner. And we want it to be object-oriented.&lt;/p&gt;

&lt;p&gt;Core data framework is very powerful.&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Create a visual mapping between database and objects;&lt;/li&gt;
  &lt;li&gt;Create and query for objects using object-oriented API;&lt;/li&gt;
  &lt;li&gt;Access the “columns in the database table” using &lt;strong&gt;@property&lt;/strong&gt;s on those objects.&lt;/li&gt;
  &lt;li&gt;Create a core data model, the visual map in xcode.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;an-object-context&quot;&gt;An Object Context&lt;/h2&gt;
&lt;p&gt;You need an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSManagedObjectContext&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is the hub around which all Core Data activity turns.&lt;/p&gt;

&lt;h3 id=&quot;how-do-i-get-one&quot;&gt;How do I get one?&lt;/h3&gt;
&lt;p&gt;There are two ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIMangedDocument&lt;/code&gt; and ask for its &lt;code class=&quot;highlighter-rouge&quot;&gt;managedObjectContext&lt;/code&gt; (a &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click the “Use Core Data” button when you create a project (only works with certain templates, then you AppDelegate will have a managedObjectContext @property).&lt;/p&gt;

    &lt;p&gt;There will be an &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;/code&gt; and a method &lt;code class=&quot;highlighter-rouge&quot;&gt;saveContext&lt;/code&gt; generated for managing the core data.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSPersistentContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;persistentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The persistent container for the application. This implementation creates and returns a container, having loaded the store for the application to it.
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We’re going to focus on doing the first one &lt;code class=&quot;highlighter-rouge&quot;&gt;UIManagedDocument&lt;/code&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;uimanageddocument&quot;&gt;UIManagedDocument&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIManagedDocument&lt;/code&gt; inherits from UIDocument which provides a lot of mechanism for the management of storage. It also good for iCloud support. Think of a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIManagedDocument&lt;/code&gt; as simply a container for your Core Data database.&lt;/p&gt;

&lt;h3 id=&quot;create-a-uimanageddocument&quot;&gt;1. Create a UIManagedDocument&lt;/h3&gt;
&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NSFileManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSFileManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentsDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URLsForDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDocumentDirectory&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inDomains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NSUserDomainMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;MyDocument&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentsDirectory&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URLByAppendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UIManagedDocument&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIManagedDocument&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithFileURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This creates the UIManagedDocument instance, but does not open nor create the underlying file.&lt;/p&gt;

&lt;h3 id=&quot;open-or-create-a-uimanageddocument&quot;&gt;2. Open or Create a UIManagedDocument&lt;/h3&gt;
&lt;p&gt;Check if the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIManagedDocument&lt;/code&gt;’s underlying file exists on disk:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileExists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSFileManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fileExistsAtPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIManagedDocument&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithFileURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSFileManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fileExistsAtPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;openWithCompletionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;documentIsReady&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;couldn’t open document at %@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveToURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forSaveOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIDocumentSaveForCreating&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;documentIsReady&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;couldn't create document at %@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentIsReady&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDocumentStateNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
	&lt;span class=&quot;c1&quot;&gt;// start using document
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;NSManagedObjectContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;managedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;saving--closing&quot;&gt;3. Saving &amp;amp; Closing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;UIManagedDocument&lt;/code&gt;s AUTOSAVE themselves!&lt;/li&gt;
  &lt;li&gt;Will automatically close if there are no strong pointers left to it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nsnotification&quot;&gt;NSNotification&lt;/h2&gt;

&lt;h3 id=&quot;how-would-you-watch-a-documents-managedobjectcontext&quot;&gt;How would you watch a document’s managedObjectContext?&lt;/h3&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contextChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSManagedObjectContextDidSaveNotification&lt;/span&gt;
                  &lt;span class=&quot;nl&quot;&gt;object:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;managedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//don’t pass nil here!
&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWillDisappear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;
                       &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSManagedObjectContextDidSaveNotification&lt;/span&gt;
                     &lt;span class=&quot;nl&quot;&gt;object:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;managedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewWillDisappear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;core-data&quot;&gt;Core Data&lt;/h2&gt;
&lt;p&gt;Now we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIManagedDocument&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;managedObjectContext&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;/code&gt; to insert/delete objects in the database and query for objects in the database.&lt;/p&gt;

&lt;h2 id=&quot;query&quot;&gt;Query&lt;/h2&gt;
&lt;p&gt;We can do this by executing an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSFetchRequest&lt;/code&gt; in our &lt;code class=&quot;highlighter-rouge&quot;&gt;NSManagedObjectContext&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;four-important-things-involved-in-creating-an-nsfetchrequest&quot;&gt;Four important things involved in creating an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSFetchRequest&lt;/code&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt; to fetch (required);&lt;/li&gt;
  &lt;li&gt;How many objects to fetch at a time and/or maximum to fetch (optional, default: all);&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSSortDescriptor&lt;/code&gt; to specify the order in which the array of fetched objects are returned;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSPredicate&lt;/code&gt;* specifying which of those Entities of those Entities to fetch (optional, default is all of them).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;/h2&gt;

&lt;h3 id=&quot;q-how-to-get-managedobjectcontext-for-viewcontroller-other-than-getting-it-from-appdelegate&quot;&gt;Q: How to get managedObjectContext for viewController other than getting it from appDelegate?&lt;/h3&gt;

&lt;h3 id=&quot;a-use-dependency-injection&quot;&gt;A: Use Dependency Injection&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/21050408/how-to-get-managedobjectcontext-for-viewcontroller-other-than-getting-it-from-ap&quot;&gt;answer on stackoverflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically the caller/constructor should be setting the NSManagedObjectContext onto the called/constructed.&lt;/p&gt;

&lt;p&gt;In your &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegat&lt;/code&gt;e you should set the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSManagedObjectContext&lt;/code&gt; into the &lt;code class=&quot;highlighter-rouge&quot;&gt;rootViewController&lt;/code&gt; that is associated with the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your &lt;code class=&quot;highlighter-rouge&quot;&gt;rootViewController&lt;/code&gt; should then set the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSManagedObjectContext&lt;/code&gt; into the next view controller and so on.&lt;/p&gt;

&lt;p&gt;How? It is just a simple proper on the view controller class and the caller uses:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextViewController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setManagedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;managedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Some others may recommend a singleton but that is another deep dark pit that is best avoided.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Role of 'Rural Resentment' in the Election 2016</title>
   <link href="http://localhost:4000/thoughts/2016/11/10/rural-resentment.html"/>
   <updated>2016-11-10T00:00:00+08:00</updated>
   <id>http://localhost:4000/thoughts/2016/11/10/rural-resentment</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;There is an obvious phenomenon when I was watching the results popping out with the votes' distribution geographically: most people in urban area supported Hillary while there was a landslide winning in favor of Trump in rural area all over the country. An article stressed this topic and I take a summary here.&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/20161110-election-map.jpg&quot; alt=&quot;Trump has better coverage than Verizon&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The original &lt;a href=&quot;http://www.npr.org/2016/08/18/490240652/is-rural-resentment-driving-voters-to-donald-trump&quot;&gt;article on NPR.com is here&lt;/a&gt;. This article was published months before the general election.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;is-rural-resentment-driving-voters-to-donald-trump&quot;&gt;Is ‘Rural Resentment’ Driving Voters To Donald Trump?&lt;/h1&gt;

&lt;p&gt;The rural-urban divide persists nationwide. Hillary Clinton led Trump by 26 points in urban areas in a recent poll, also from the Washington Post. But in rural areas, Trump led Clinton by 20 points.&lt;/p&gt;

&lt;p&gt;Four years ago, Obama won urban areas by 26 points, according to exit polls, while Romney won rural areas by 20 points.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why?&lt;/h2&gt;

&lt;p&gt;Rural voters heavily lean toward supporting Trump, so it’s no surprise that the stats that describe America’s rural areas also happen to describe Trump supporters quite well. Trump does particularly well among older, white and non-college-educated Americans.&lt;/p&gt;

&lt;p&gt;And as it happens, &lt;strong&gt;rural areas are older than the rest of the nation&lt;/strong&gt; — the median age in rural areas is around 40, compared to 37 for the rest of the country, according to a report from the Housing Assistance Council, a group that promotes affordable housing in rural areas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Likewise, rural areas tend to be less educated than urban areas.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/20161110-npr-rural-diversity.png&quot; alt=&quot;rural less diverse&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rural areas are whiter, as well. Nearly 80 percent of people in rural areas are white non-Hispanics, compared to around 64 percent among the U.S. as a whol&lt;/p&gt;

&lt;h2 id=&quot;does-rural-ness-drive-peoples-votes&quot;&gt;Does Rural-Ness Drive People’s Votes?&lt;/h2&gt;

&lt;p&gt;All these stats might make it seem that it’s demographics that cause rural voters to choose Trump, or other Republican candidates: that there’s something about being white or about being older or not having a college diploma that makes a person vote for him, and that those people also just happen to live in rural areas.&lt;/p&gt;

&lt;p&gt;Or, perhaps, that there’s something about being conservative that makes a person choose a rural area.&lt;/p&gt;

&lt;p&gt;There’s this sense that people in those communities are not getting their fair share compared to people in the cities,” said Katherine Cramer, a political science professor at the University of Wisconsin.&lt;/p&gt;

&lt;p&gt;“They feel like their communities are dying, and they perceive that all that stuff — the young people, the money, the livelihood — is going somewhere, and it’s going to the cities,” she said.&lt;/p&gt;

&lt;p&gt;“Many voters have racial and economic resentments, but the thing that surprised me in my research was how common it was for people in small towns to talk about these resentments with reference to their towns,” she said.&lt;/p&gt;

&lt;h2 id=&quot;trumps-favorable&quot;&gt;Trump’s Favorable&lt;/h2&gt;

&lt;p&gt;Trump’s rhetoric may similarly appeal to America’s rural populations.&lt;/p&gt;

&lt;p&gt;“The resources, the people, the respect seem to be going somewhere else, or to other types of people, and here comes someone who says ‘You’re right, you’re not getting your fair share. It’s going to people who aren’t deserving, and you vote me in and we’re going to make America great again,” she said.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iOS7 CS193P 13/14 Photomania Demo Note</title>
   <link href="http://localhost:4000/ios%20development/2016/11/07/Photomania-Demo-Note.html"/>
   <updated>2016-11-07T00:00:00+08:00</updated>
   <id>http://localhost:4000/ios%20development/2016/11/07/Photomania-Demo-Note</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
This might be the toughest and the biggest demo in this iOS course. Here I put my note collection here as reference for later use. 11/06/2016
&lt;/div&gt;

&lt;h2 id=&quot;create-the-project&quot;&gt;Create the Project&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Create a project with single view as normal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;database-setup&quot;&gt;Database Setup&lt;/h2&gt;

&lt;h3 id=&quot;create-the-database&quot;&gt;1. Create the Database&lt;/h3&gt;
&lt;p&gt;Create a database file. Then, add the following two entities into the database:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Photo&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Photographer&lt;/strong&gt;
&lt;!--more--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;define-the-schema-schema-visually&quot;&gt;2. Define the Schema &lt;sup id=&quot;fnref:schema&quot;&gt;&lt;a href=&quot;#fn:schema&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Visually.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Add properties to them respectively. (e.g. title, url, data, name etc.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add relationship between the two entities:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;For &lt;strong&gt;Photographer&lt;/strong&gt; in &lt;strong&gt;Photo&lt;/strong&gt;, the relationship is &lt;strong&gt;&lt;em&gt;whoTook&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;For &lt;strong&gt;Photo&lt;/strong&gt; in &lt;strong&gt;Photographer&lt;/strong&gt; the relationship is the same one, but called &lt;strong&gt;&lt;em&gt;photos&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

        &lt;p&gt;(&lt;strong&gt;NOTICE&lt;/strong&gt;: The relationship type here should be set as &lt;strong&gt;&lt;em&gt;To Many&lt;/em&gt;&lt;/strong&gt;, because one photographer may take multiple photos.)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;create-nsmanagedobject-subclasses&quot;&gt;3. Create NSManagedObject Subclasses&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Create NSManagedObject Subclasses automatically using XCode.
    &lt;ul&gt;
      &lt;li&gt;Select both entities;&lt;/li&gt;
      &lt;li&gt;click “Editor”, then “Create NSManagedObject Subclasses”;&lt;/li&gt;
      &lt;li&gt;The correspondent subclasses &lt;strong&gt;Photo.h/Photo.m&lt;/strong&gt; and &lt;strong&gt;Photographer.h/Photographer.m&lt;/strong&gt; are created in the project and can be found in the project navigator.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Notice that in XCode 7 and later, the generated new subclasses include: entity and their CoreDataProperties category like this:&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/public/img/20161106-0.png&quot; alt=&quot;subclasses&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;To understand this, check &lt;a href=&quot;http://stackoverflow.com/questions/33106098/xcode-7-generates-core-data-entity-with-additional-coredataproperties-category&quot;&gt;this Q&amp;amp;A on Stack Overflow&lt;/a&gt;. The gist is that you can use  the two files &lt;em&gt;without&lt;/em&gt; “properties” to add some custom methods or properties. In this way, whenever you update your database property setup and regenerate these supclasses, these custom methods will still be there.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;continue on 11/07/2016&lt;/code&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Also another thing to mention is that don’t forget to choose your data model and go to the file inspector, then choose the code generation language to what you desired. Here I use OC. If don’t do this, language compatibility issue may occur.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;add-custom-methods-to-the-subclasses&quot;&gt;4. Add Custom Methods to the Subclasses&lt;/h3&gt;
&lt;p&gt;Add these too class methods to &lt;code class=&quot;highlighter-rouge&quot;&gt;Photos+CoreDataClass&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;photoWithFlickrInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;photoDictionary&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;inManagedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSManagedObjectContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadPhotosFromFlickrArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;photos&lt;/span&gt;
         &lt;span class=&quot;nf&quot;&gt;intoManagedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSManagedObjectContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:schema&quot;&gt;
      &lt;p&gt;A &lt;strong&gt;schema&lt;/strong&gt; is a collection of database objects (as far as this hour is concerned—tables) associated with one particular database username. This username is called the schema owner, or the owner of the related group of objects. You may have one or multiple schemas in a database. Jul 1, 2008 &lt;a href=&quot;http://www.informit.com/articles/article.aspx?p=1216889&amp;amp;seqNum=2&quot;&gt;Managing Database Objects in SQL&lt;/a&gt; &lt;a href=&quot;#fnref:schema&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Class Renaming Issue</title>
   <link href="http://localhost:4000/ios%20development/2016/11/06/rename-issue.html"/>
   <updated>2016-11-06T00:00:00+08:00</updated>
   <id>http://localhost:4000/ios%20development/2016/11/06/rename-issue</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
This is a common issue that anybody using XCode may encounter. It's usually very annoying when you want to change the names of the classes because file names and includes are all related when you do it. Here I gather some correct (should be) way to make it happen. 
&lt;/div&gt;

&lt;h2 id=&quot;change-default-view-controller-name&quot;&gt;1. Change Default View Controller Name&lt;/h2&gt;

&lt;p&gt;Check this: &lt;a href=&quot;http://rshankar.com/how-to-rename-default-view-controllers-in-xcode/&quot;&gt;How to rename default view controllers in XCode&lt;/a&gt;
In short, it looks like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Navigate to FirstViewController.h and select the name after interface keyword.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Click the Edit menu then Refactor and select Rename from the list of available option.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Enter the name then select Rename related files and click the Preview button. This would display the list of files and location where the rename would affect.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; If you are happy with Preview then save the changes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tried the steps above and it works fine.&lt;/p&gt;

&lt;p&gt;According to personal experience, you’d better change your default controller name right after you create your new  application. As more files and classes are added, there might be more problems emerge.&lt;/p&gt;

&lt;p&gt;Oh, by the way, DON’T FORGET to change your controller class name to the new one in the identity inspector in storyboard.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;change-default-appdelegate-name&quot;&gt;2. Change Default AppDelegate Name&lt;/h2&gt;

&lt;p&gt;I applied the same steps to rename my default &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.h/AppDelegate.m&lt;/code&gt; class. It works fine, but you need to change the app delegate include name in &lt;code class=&quot;highlighter-rouge&quot;&gt;main.m&lt;/code&gt; manually, or there’ll be an error.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>This is my first blog</title>
   <link href="http://localhost:4000/note/2016/11/03/This-is-my-first-blog.html"/>
   <updated>2016-11-03T00:00:00+08:00</updated>
   <id>http://localhost:4000/note/2016/11/03/This-is-my-first-blog</id>
   <content type="html">&lt;h2 id=&quot;try-writing-markdown-blogs-with-macdown&quot;&gt;Try writing markdown blogs with MacDown&lt;/h2&gt;

&lt;p&gt;Oh! This is really an awesome editor as I’m typing these words. I can see what it looks like as published on the right. As long I wanna try some syntax in markdown that I’m not quite familiar, I just try it, and take a look:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this is a block
this is a block
this is a block
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is really nice, and efficiency.The inline block is like &lt;code class=&quot;highlighter-rouge&quot;&gt;this is an inline block&lt;/code&gt;. this is a link: &lt;a href=&quot;http://google.com&quot;&gt;google&lt;/a&gt; This is really awesome!!! I like it.&lt;/p&gt;

&lt;p&gt;Now, it’s time to start my technical blog writing.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-insert-an-image-in-the-blog&quot;&gt;How to insert an image in the blog?&lt;/h2&gt;

&lt;p&gt;Example:
add the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![My first image inserted](/public/img/ios-10-nimblechapps.png)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;the path in the parentheses is the image local url.&lt;/p&gt;

&lt;p&gt;The result is like this:
&lt;img src=&quot;/public/img/20161103-0-ios10.png&quot; alt=&quot;My first image inserted&quot; /&gt;&lt;/p&gt;

&lt;p&gt;add snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
@interface

@property (nonatomic, strong) UITableView *tableView;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;&lt;em&gt;KF&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
